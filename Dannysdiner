CREATE TABLE sales (customer_id VARCHAR(1), order_date DATE,product_id INTEGER
);

INSERT INTO sales
  (customer_id, order_date, product_id)
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  product_id INTEGER,
  product_name VARCHAR(5),
  price INTEGER
);

INSERT INTO menu
  (product_id, product_name, price)
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  customer_id VARCHAR(1),
  join_date DATE
);

INSERT INTO members
  (customer_id, join_date)
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
  select * from menu;
  select * from sales;
  select * from members;
  
  /*What is the total amount each customer spent at the restaurant?*/

  select s.customer_id,sum(m.price) as 'Total_Amount'
  from sales s 
  join menu m on m.product_id = s.product_id
  Group by 1;
  
  /* How many days has each customer visited the restaurant?*/

  select customer_id,count(distinct(order_date)) as 'No of days visted'
  from sales
  Group by customer_id;
  
  /* What was the first item from the menu purchased by each customer?*/

  select * from 
  (select s.customer_id,m.product_name ,row_number() over(partition by customer_id) as 'Rank'
  from sales s 
  join menu m on m.product_id=s.product_id) as ranked
  where ranked.Rank = 1;
  
  /* What is the most purchased item on the menu and how many times was it purchased by all customers?*/

  select m.product_name,count(s.product_id) as totalcount
  from sales s
  join menu m on m.product_id = s.product_id
  group by m.product_name
  order by totalcount DESC
  limit 1;
  
  /*Which item was the most popular for each customer? */

   with cte as(
   select s.customer_id,m.product_name,count(s.product_id) as totalcount,
   rank() over(partition by s.customer_id order by count(s.product_id) DESC) as ranking
  from sales s
  join menu m on m.product_id = s.product_id
  group by s.customer_id,m.product_name) 
  select * from cte where ranking = 1 ;
  
  /* Which item was purchased first by the customer after they became a member?*/

  select * from
  (select s.customer_id,m.product_name,row_number() over(partition by customer_id) as 'Rank'
  from sales s 
  join members mem on mem.customer_id = s.customer_id
  join menu m on m.product_id= s.product_id
  where (s.customer_id = 'A' and s.order_date > '2021-01-07') 
  or (s.customer_id = 'B' and s.order_date > '2021-01-09')) as ranked
  where ranked.Rank = 1 ;
  
  /* Which item was purchased just before the customer became a member?*/
  select * from
  (select s.customer_id,m.product_name,rank() over(partition by s.customer_id order by order_date DESC) as 'Ranking'
  from sales s 
  join members mem on mem.customer_id = s.customer_id
  join menu m on m.product_id =s.product_id
  where s.order_date < mem.join_date) as ranked
  where ranked.ranking = 1;
  
  /*What is the total items and amount spent for each member before they became a member? */

  select mem.customer_id,count(s.product_id) as 'Total Items',sum(m.price) as 'Amount Spent'
  from members mem 
  join sales s on s.customer_id = mem.customer_id
  join menu m on m.product_id = s.product_id
  where s.order_date < mem.join_date
  group by mem.customer_id;
  
  /* If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?*/

  with cte as
  (select s.customer_id,s.product_id,
  case when m.product_name ='sushi' then m.price*20 
       when m.product_name = 'ramen' then m.price*10 
	   when m.product_name = 'curry' then m.price*10 end as product_price
  from sales s
  join menu m on m.product_id = s.product_id),
  cte2 as (
  select customer_id,count(product_id),(product_id * product_price) as 'TotalPrice'
  from cte
  group by customer_id,TotalPrice)
  select customer_id,sum(TotalPrice) as Points
  from cte2
  Group by customer_id;
  
  /* In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?*/

with cte as(
select s.customer_id,count(s.product_id) as totalproducts,
case when m.product_name ='sushi' then m.price*20 
       when m.product_name = 'ramen' then m.price*20 
	   when m.product_name = 'curry' then m.price*20 end as product_price
  from sales s
  join menu m on m.product_id = s.product_id
  join members mem on mem.customer_id = s.customer_id
  where s.order_date >= mem.join_date
  Group by s.customer_id,product_price),
  cte2 as(
  select customer_id,(totalproducts * product_price) as points
  from cte)
  select customer_id,sum(points) as TotalPoints
  from cte2
  Group by customer_id;
  
  
  /*     Bonus Questions
Join All The Things
The following questions are related creating basic data tables that Danny and his team can use to quickly derive insights without needing to join the underlying tables using SQL.
Recreate the following table output using the available data:*/

select s.customer_id,s.order_date,m.product_name,m.price,
case when s.order_date >= mem.join_date then 'Y'
     when s.order_date < mem.join_date then  'N'
     else 'N'
     end as member
from sales s 
left join menu m on m.product_id = s.product_id
left join members mem on mem.customer_id = s.customer_id
Order by s.customer_id,s.order_date;

/*  Rank All The Things
Danny also requires further information about the ranking of customer products, 
but he purposely does not need the ranking for non-member purchases so he expects null*/

with cte as (
select s.customer_id,s.order_date,m.product_name,m.price,
case when s.order_date >= mem.join_date then 'Y'
     when s.order_date < mem.join_date then  'N'
     else 'N'
     end as member
from sales s 
left join menu m on m.product_id = s.product_id
left join members mem on mem.customer_id = s.customer_id
Order by s.customer_id,s.order_date)
select *,
case when member='N' then Null
     ELSE RANK() OVER (PARTITION BY customer_id ORDER BY order_date)
  END AS ranking
from cte;

